--- Listing of valid IP addresses, this is stored in the App_Data folder and is an xml file ---
	<?xml version="1.0" encoding="utf-8" ?>
	<validips>
	  <machine>
		<name>ptr.us.xo.net</name>
		<ip>206.111.152.102</ip>
	  </machine>
	  <machine>
		<name>ptr.us.xo.net</name>
		<ip>206.111.152.106</ip>
	  </machine>
	</validips>

--- Make an entry in the web.config with the path to the list of valid IPs so the application can find and read them ---
	<configuration>
	  ...
	  <appSettings>
		...
		<add key="ValidIPsPath" value="~/App_Data/validips.xml" />
		...
	  </appSettings>
	  ...
	<configuration>
	
--- Code that processes the IP checking, this file was kept in App_Code ---
	Imports Microsoft.VisualBasic
	Imports System.Collections.Generic
	Imports System.IO
	Imports System.Web
	Imports System.Xml
	Imports System.Web.HttpContext

	Namespace LiveOpsOncorIns

		Public Class LiveOps

			Public Function getLiveOpsIPs() As List(Of machine)

				Dim output As New List(Of machine)
				Dim doc As New XmlDocument()
				' 10885 LiveOps Oncor Ins Alert email Modification
				Dim ValidIPsPath As String = ConfigurationManager.AppSettings("ValidIPsPath")
				Dim logMsg As String

				If String.IsNullOrEmpty(ValidIPsPath) Then
					logMsg = "The ValidIPsPath key is not defined in the appSettings section of the Web.Config"
				Else

					Dim path As String = HttpContext.Current.Server.MapPath(ValidIPsPath)

					If File.Exists(path) Then
						Dim nodeList As XmlNodeList

						doc.Load(path)
						nodeList = doc.SelectNodes("/validips/machine")

						For Each node As XmlNode In nodeList
							If node.HasChildNodes Then
								output.Add(New machine(node))
							End If
						Next
					Else
						logMsg = String.Format("Unable to locate the LiveOpsValidIPs XML file: {0}", path)
					End If

				End If

				logMsg = String.Format("The list of LiveOpsValidIPs is being returned with {0} entries", output.Count.ToString)

				Return output

			End Function

			Public Function isValidIP() As Boolean

				isValidIP = False   'Default to false so that we don't stop the error e-mails unless a LiveOps Valid IP is found.

				Dim requestIP As String = HttpContext.Current.Request.UserHostAddress()
				Dim qryStringPassed As String = HttpContext.Current.Request.Url.ToString

				' also write the information to the error log
				Dim errorLog As New ErrorLogData(Current.Session("DataProvider"))
				errorLog.LogError("LiveOps.vb", -500, "isValidIP - requestIP", "The requesting IP: " & requestIP & " Querystring Passed: " & qryStringPassed, Current.Application("SiteName"))

				' 10885 LiveOps Oncor Ins Alert email Modification
				Dim sl As List(Of machine) = getLiveOpsIPs()

				If sl IsNot Nothing Then
					For Each m As machine In sl
						If requestIP = m.IP Then
							Return True
						End If
					Next
				End If

			End Function

			Public Class machine

				Private _ip As String = String.Empty
				Private _name As String = String.Empty

				Public Property IP() As String
					Get
						Return _ip
					End Get
					Set(ByVal value As String)
						_ip = value
					End Set
				End Property

				Public Property Name() As String
					Get
						Return _name
					End Get
					Set(ByVal value As String)
						_name = value
					End Set
				End Property

				Public Sub New()

				End Sub

				Public Sub New(ByVal node As XmlNode)
					For Each child As XmlNode In node.ChildNodes
						Select Case child.Name
							Case "name"
								_name = child.InnerText
							Case "ip"
								_ip = child.InnerText
						End Select
					Next
				End Sub

				Public Overrides Function ToString() As String
					Return String.Format("Machine Name: {0}; IP Address: {1};", _name, _ip)
				End Function

			End Class

		End Class

	End Namespace
	
--- Calling the class above to test if the user has a valid IP from the list ---
	Dim s As New LiveOpsOncorIns.LiveOps
	If s.isValidIP() Then
		' Tada you get in
	End If
	Response.Redirect(Application("RedirectURL"))
